<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Marks Blog</title><link>/</link><description>Recent content on Marks Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 25 Feb 2025 19:02:12 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Practical GitOps Pattern</title><link>/posts/gitops/</link><pubDate>Tue, 25 Feb 2025 19:02:12 +0000</pubDate><guid>/posts/gitops/</guid><description>&lt;p>&lt;strong>Introduction&lt;/strong>&lt;br>
If you’ve spent any time working with Kubernetes, you’ve probably heard of &lt;em>GitOps&lt;/em>—a methodology that treats Git as the source of truth for defining and operating infrastructure and applications. In this post, I’ll walk you through a GitOps setup that uses a hierarchical folder structure, combining Helm, Helmfile, and Kustomize to give you robust, testable, and scalable deployments. We’ll also see how tools like Flux and Tilt fit into the workflow, enabling both automated deployments and seamless local development.&lt;/p></description></item><item><title>Using socat to backdoor via kubernetes</title><link>/posts/socat/</link><pubDate>Fri, 22 Jan 2021 09:02:12 +0000</pubDate><guid>/posts/socat/</guid><description>&lt;p>Sometimes when you&amp;rsquo;re developing or debugging locally you need access to resources that are exposed to your cluster.&lt;/p>
&lt;p>Typically, most organisations use VPN&amp;rsquo;s to enable you to access these resources, but there&amp;rsquo;s a much easier way.&lt;/p>
&lt;h2 id="socat">Socat.&lt;/h2>
&lt;p>The alpine/socat image is perfect for enabling backdoor access to private or internal services that are available to
your cluster without having to set up and manage VPN&amp;rsquo;s.&lt;/p>
&lt;p>How it works is pretty simple. We run a socat pod exposing a service that&amp;rsquo;s viewable by the pod but not by us.&lt;/p></description></item></channel></rss>